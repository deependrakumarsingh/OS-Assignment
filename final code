#include<unistd.h>
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<pthread.h>
#include<sys/wait.h>

#define MIN_PID 100
#define MAX_PID 1000
#define SIZE MAX_PID-MIN_PID

int NO;
int arr[SIZE];                       //Declaring arr
// initially assigning 0
int allot()
{
 int k;
 for(k=0;k<SIZE;k++)                 // for loop
 {
  arr[k]=0;          //Mark all as available in the arr
 }
}

int assign(void)
{
  int i,flag=1;
  for(i=0;i<SIZE;i++)               // for loop
  {
   if(arr[i]==0)
   {
    arr[i]=1;
    flag=0;
    break;
   }
  }
  return flag?-1:i;          // Ternary Operator
}
void release(int j)
{
arr[j]=0;
}
void *thread_fun(void *a)
{
int tid=*((int*)a);
int id=assign();

if(id<0)
{
printf("pids are not avaliable");
}
else
{
printf("Thread [%3d] PID [%3d] assigned\n",tid,id+MIN_PID);
        // to sleep for a random time between 1-10 seconds
        int r=1+rand()%30;
        sleep(r);

printf("Thread [%3d] PID [%3d] Released after %d sec\n",tid,id+MIN_PID,r);
        release(id);
    }
pthread_exit(NULL);
}
int main()
{
printf("Enter no of processes: ");
scanf("%d",&NO);
if(NO<1)
{
printf("invalid input");
}
else
{
	int i;
	allot();
	pthread_t pro[NO];
	srand(time(NULL));
	for(i=0;i<NO;i++)
	{
	if(pthread_create(&pro[i],NULL,thread_fun,(void*)&i))
	            return -1*printf("error\n");
	}
	for(i=0; i<NO; i++)
	pthread_join(pro[i],NULL);
	
	return 0*printf("\nSuccesful\n");
}
}

